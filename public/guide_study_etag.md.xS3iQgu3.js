import{_ as i,a}from"./chunks/etag2.xLcgxUa9.js";import{_ as t,f as n,o as h,b1 as p}from"./chunks/framework.CfD84-nl.js";const o=JSON.parse('{"title":"MinIO 分片 ETAG 生成机制","description":"","frontmatter":{},"headers":[],"relativePath":"guide/study/etag.md","filePath":"guide/study/etag.md"}'),k={name:"guide/study/etag.md"};function l(e,s,E,r,d,y){return h(),n("div",null,s[0]||(s[0]=[p('<h1 id="minio-分片-etag-生成机制" tabindex="-1">MinIO 分片 ETAG 生成机制 <a class="header-anchor" href="#minio-分片-etag-生成机制" aria-label="Permalink to &quot;MinIO 分片 ETAG 生成机制&quot;">​</a></h1><p>在 MinIO 中，分片上传和普通上传时，文件一致性校验是不一样的，我们分开说。</p><h2 id="普通上传" tabindex="-1">普通上传 <a class="header-anchor" href="#普通上传" aria-label="Permalink to &quot;普通上传&quot;">​</a></h2><p>MinIO 会对所有上传的文件自动生成一个 Etag 标签，这个标签值的默认算法就是 MD5 。 所以我们在做一致性校验时，前端程序读取本地文件进行 MD5 计算，在上传完成时，比较两个值是否一致即可校验一致性。</p><h2 id="分片上传" tabindex="-1">分片上传 <a class="header-anchor" href="#分片上传" aria-label="Permalink to &quot;分片上传&quot;">​</a></h2><p>MinIO 会对每个分片进行 MD5 计算，每个分片有自己的 ETAG 标签，这个标签是隐藏的，只在 API 接口能查看，后台管理页面中是看不到的。 在所有分片上传完成后，我们调用文件合并接口进行合并时，MinIO 会将全部所有分片的 ETAG 标签进行 byte[] 连接，然后计算这个 byte[] 的 MD5 值做为整个文件的 ETAG，而不会再次读取整个文件流来进行计算，这个文件的 ETAG 是可以在MinIO的后台管理界面中看到的。 我们可以上传同一个文件到 MinIO 中，第一次使用普通上传、第二次分片上传，那么就会发现虽然是同一个文件，但是他们的 ETAG 值并不相同。</p><p>这里再提一个额外的知识，那就是 MinIO 在分片上传时会提前在磁盘创建出空洞文件（也可以叫稀疏文件），在合并文件时，并没有实际上的磁盘IO读写，所以合并分片是一个安全操作。 那么在minio-plus中，为了保证性能，我们仅对分片的 MD5 计算结果也就是分片的 ETAG 值进行一致性比较，即可保证文件的整体一致性。</p><h2 id="举个例子" tabindex="-1">举个例子 <a class="header-anchor" href="#举个例子" aria-label="Permalink to &quot;举个例子&quot;">​</a></h2><p>我现在上传一个18.9m的文件，按照5m进行分片，那么共计4个分片，如下图所示： <img src="'+i+`" alt="etag1.png"></p><p>可以看到文件的<code>ETAG</code>是<code>43abdc8a17419c3ac4400a7bb0d7d3b5-4</code> 这个<code>ETAG</code>分成两部分，前面是MD5值，后面的分片数量。</p><p>那么现在我们模拟一下MinIO的<code>ETAG</code>计算过程，根据分片的<code>ETAG</code>计算整个文件的<code>ETAG</code>。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        String part1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;101faaef4cc4567091dbf5c62d0f2a66&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        String part2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;54b96a8a5cf6164c1e197ff9e97b9e3c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        String part3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;f647e6824a99b6ca06805dbc10756870&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        String part4 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;3c2f9b262e71c6fbf336432e9dbfe89b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] part1byte </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HexUtil.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decodeHex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(part1) ;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] part2byte </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HexUtil.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decodeHex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(part2) ;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] part3byte </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HexUtil.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decodeHex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(part3) ;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] part4byte </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HexUtil.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decodeHex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(part4) ;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[part1byte.length </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> part2byte.length </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> part3byte.length </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> part4byte.length];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arraycopy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(part1byte, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, result, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, part1byte.length);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arraycopy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(part2byte, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, result, part1byte.length, part2byte.length);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arraycopy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(part3byte, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, result, part1byte.length </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> part2byte.length, part3byte.length);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arraycopy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(part4byte, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, result, part1byte.length </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> part2byte.length </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> part3byte.length, part4byte.length);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;直接字符串连接并计算MD5=&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SecureUtil.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">md5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(part1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> part2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> part3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> part4));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;转义字节数组后拼接并计算MD5=&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SecureUtil.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">md5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(IoUtil.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result)));</span></span></code></pre></div><p>运行截图： <img src="`+a+'" alt="etag2.png"></p><p>这里可以看到，直接进行字符串拼接是不行的，计算出的ETAG值与MinIO并不一致。 而转换为字节数组后拼接，再计算，就一致了。</p>',14)]))}const F=t(k,[["render",l]]);export{o as __pageData,F as default};
