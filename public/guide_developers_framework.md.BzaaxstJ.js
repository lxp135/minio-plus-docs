import{_ as a,f as i,o as n,b1 as t}from"./chunks/framework.CfD84-nl.js";const g=JSON.parse('{"title":"MinIO-Plus 代码结构文档","description":"","frontmatter":{},"headers":[],"relativePath":"guide/developers/framework.md","filePath":"guide/developers/framework.md"}'),e={name:"guide/developers/framework.md"};function l(p,s,o,r,d,h){return n(),i("div",null,s[0]||(s[0]=[t(`<h1 id="minio-plus-代码结构文档" tabindex="-1">MinIO-Plus 代码结构文档 <a class="header-anchor" href="#minio-plus-代码结构文档" aria-label="Permalink to &quot;MinIO-Plus 代码结构文档&quot;">​</a></h1><p>本文档详细介绍 MinIO-Plus 项目的代码结构，包括模块划分、包组织和各模块的职责。</p><h2 id="项目概览" tabindex="-1">项目概览 <a class="header-anchor" href="#项目概览" aria-label="Permalink to &quot;项目概览&quot;">​</a></h2><p>MinIO-Plus 采用多模块 Maven 项目结构，遵循模块化设计原则，将不同功能拆分到独立的模块中，便于维护和扩展。</p><h3 id="项目基本信息" tabindex="-1">项目基本信息 <a class="header-anchor" href="#项目基本信息" aria-label="Permalink to &quot;项目基本信息&quot;">​</a></h3><ul><li><strong>Group ID</strong>: <code>me.liuxp</code></li><li><strong>Artifact ID</strong>: <code>minio-plus-parent</code></li><li><strong>版本</strong>: <code>1.0.5</code></li><li><strong>Java 版本</strong>: JDK 8+</li><li><strong>构建工具</strong>: Maven</li><li><strong>包命名规范</strong>: <code>org.liuxp.minioplus.*</code></li></ul><h2 id="模块架构图" tabindex="-1">模块架构图 <a class="header-anchor" href="#模块架构图" aria-label="Permalink to &quot;模块架构图&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>minio-plus-parent</span></span>
<span class="line"><span>├── minio-plus-common          # 公共模块</span></span>
<span class="line"><span>├── minio-plus-api             # API 接口定义</span></span>
<span class="line"><span>├── minio-plus-core            # 核心实现</span></span>
<span class="line"><span>├── minio-plus-extension       # 扩展功能</span></span>
<span class="line"><span>├── minio-plus-s3-api          # S3 API 适配</span></span>
<span class="line"><span>│   ├── s3-api-definition      # S3 API 定义</span></span>
<span class="line"><span>│   └── s3-api-minio          # MinIO S3 实现</span></span>
<span class="line"><span>└── minio-plus-spring-boot-starter  # Spring Boot 集成</span></span>
<span class="line"><span>    ├── minio-plus-core-springboot-starter     # 核心功能 SpringBoot3 Starter</span></span>
<span class="line"><span>    ├── minio-plus-core-springboot2-starter    # 核心功能 SpringBoot2 Starter</span></span>
<span class="line"><span>    ├── minio-plus-all-springboot-starter      # 完整功能 SpringBoot3 Starter</span></span>
<span class="line"><span>    └── minio-plus-all-springboot2-starter     # 完整功能 SpringBoot2 Starter</span></span></code></pre></div><h2 id="模块详细说明" tabindex="-1">模块详细说明 <a class="header-anchor" href="#模块详细说明" aria-label="Permalink to &quot;模块详细说明&quot;">​</a></h2><h3 id="_1-minio-plus-common-公共模块" tabindex="-1">1. minio-plus-common (公共模块) <a class="header-anchor" href="#_1-minio-plus-common-公共模块" aria-label="Permalink to &quot;1. minio-plus-common (公共模块)&quot;">​</a></h3><p><strong>职责</strong>: 提供项目中通用的基础组件和工具类。</p><p><strong>包结构</strong>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>org.liuxp.minioplus.common</span></span>
<span class="line"><span>├── config/          # 配置相关类</span></span>
<span class="line"><span>├── enums/           # 枚举定义</span></span>
<span class="line"><span>└── exception/       # 异常定义</span></span></code></pre></div><p><strong>主要功能</strong>:</p><ul><li>通用配置类</li><li>业务枚举定义</li><li>自定义异常类</li><li>工具类和常量定义</li></ul><p><strong>依赖关系</strong>: 无外部模块依赖，被其他模块依赖</p><h3 id="_2-minio-plus-api-api-接口定义" tabindex="-1">2. minio-plus-api (API 接口定义) <a class="header-anchor" href="#_2-minio-plus-api-api-接口定义" aria-label="Permalink to &quot;2. minio-plus-api (API 接口定义)&quot;">​</a></h3><p><strong>职责</strong>: 定义对外提供的核心 API 接口和数据模型。</p><p><strong>包结构</strong>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>org.liuxp.minioplus.api</span></span>
<span class="line"><span>├── StorageService.java    # 存储服务接口</span></span>
<span class="line"><span>└── model/                 # 数据模型</span></span></code></pre></div><p><strong>主要功能</strong>:</p><ul><li>存储服务接口定义</li><li>请求响应模型</li><li>DTO 对象定义</li><li>接口规范约定</li></ul><p><strong>依赖关系</strong>: 依赖 <code>minio-plus-common</code></p><h3 id="_3-minio-plus-core-核心实现" tabindex="-1">3. minio-plus-core (核心实现) <a class="header-anchor" href="#_3-minio-plus-core-核心实现" aria-label="Permalink to &quot;3. minio-plus-core (核心实现)&quot;">​</a></h3><p><strong>职责</strong>: 实现核心业务逻辑和存储功能。</p><p><strong>包结构</strong>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>org.liuxp.minioplus.core</span></span>
<span class="line"><span>├── common/          # 核心公共组件</span></span>
<span class="line"><span>├── engine/          # 存储引擎实现</span></span>
<span class="line"><span>├── repository/      # 数据访问层</span></span>
<span class="line"><span>└── service/         # 业务服务层</span></span></code></pre></div><p><strong>主要功能</strong>:</p><ul><li>文件上传下载核心逻辑</li><li>分片上传实现</li><li>断点续传功能</li><li>文件秒传机制</li><li>缩略图生成</li><li>存储策略管理</li></ul><p><strong>依赖关系</strong>:</p><ul><li>依赖 <code>minio-plus-common</code></li><li>依赖 <code>minio-plus-api</code></li><li>依赖 <code>s3-api-definition</code></li></ul><h3 id="_4-minio-plus-extension-扩展功能" tabindex="-1">4. minio-plus-extension (扩展功能) <a class="header-anchor" href="#_4-minio-plus-extension-扩展功能" aria-label="Permalink to &quot;4. minio-plus-extension (扩展功能)&quot;">​</a></h3><p><strong>职责</strong>: 提供额外的扩展功能和增强特性。</p><p><strong>包结构</strong>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>org.liuxp.minioplus.extension</span></span>
<span class="line"><span>├── context/         # 上下文管理</span></span>
<span class="line"><span>├── controller/      # 控制器扩展</span></span>
<span class="line"><span>└── dto/            # 扩展数据传输对象</span></span></code></pre></div><p><strong>主要功能</strong>:</p><ul><li>Web 控制器扩展</li><li>上下文管理器</li><li>高级功能实现</li><li>第三方集成支持</li></ul><p><strong>依赖关系</strong>: 依赖核心模块</p><h3 id="_5-minio-plus-s3-api-s3-api-适配" tabindex="-1">5. minio-plus-s3-api (S3 API 适配) <a class="header-anchor" href="#_5-minio-plus-s3-api-s3-api-适配" aria-label="Permalink to &quot;5. minio-plus-s3-api (S3 API 适配)&quot;">​</a></h3><p><strong>职责</strong>: 提供 S3 协议的抽象和具体实现。</p><h4 id="_5-1-s3-api-definition-s3-api-定义" tabindex="-1">5.1 s3-api-definition (S3 API 定义) <a class="header-anchor" href="#_5-1-s3-api-definition-s3-api-定义" aria-label="Permalink to &quot;5.1 s3-api-definition (S3 API 定义)&quot;">​</a></h4><p><strong>包结构</strong>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>org.liuxp.minioplus.s3.def</span></span></code></pre></div><p><strong>主要功能</strong>:</p><ul><li>S3 API 接口定义</li><li>S3 协议抽象</li><li>通用 S3 操作规范</li></ul><h4 id="_5-2-s3-api-minio-minio-s3-实现" tabindex="-1">5.2 s3-api-minio (MinIO S3 实现) <a class="header-anchor" href="#_5-2-s3-api-minio-minio-s3-实现" aria-label="Permalink to &quot;5.2 s3-api-minio (MinIO S3 实现)&quot;">​</a></h4><p><strong>包结构</strong>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>org.liuxp.minioplus.s3.official</span></span></code></pre></div><p><strong>主要功能</strong>:</p><ul><li>MinIO 官方 SDK 适配</li><li>S3 协议具体实现</li><li>MinIO 特性支持</li></ul><h3 id="_6-minio-plus-spring-boot-starter-spring-boot-集成" tabindex="-1">6. minio-plus-spring-boot-starter (Spring Boot 集成) <a class="header-anchor" href="#_6-minio-plus-spring-boot-starter-spring-boot-集成" aria-label="Permalink to &quot;6. minio-plus-spring-boot-starter (Spring Boot 集成)&quot;">​</a></h3><p><strong>职责</strong>: 提供 Spring Boot 自动配置和集成支持。</p><h4 id="_6-1-模块说明" tabindex="-1">6.1 模块说明 <a class="header-anchor" href="#_6-1-模块说明" aria-label="Permalink to &quot;6.1 模块说明&quot;">​</a></h4><table tabindex="0"><thead><tr><th>模块名称</th><th>支持版本</th><th>功能范围</th><th>说明</th></tr></thead><tbody><tr><td><code>minio-plus-core-springboot-starter</code></td><td>Spring Boot 3.x</td><td>核心功能</td><td>仅包含核心存储功能</td></tr><tr><td><code>minio-plus-core-springboot2-starter</code></td><td>Spring Boot 2.x</td><td>核心功能</td><td>Spring Boot 2.x 兼容版本</td></tr><tr><td><code>minio-plus-all-springboot-starter</code></td><td>Spring Boot 3.x</td><td>完整功能</td><td>包含所有功能模块</td></tr><tr><td><code>minio-plus-all-springboot2-starter</code></td><td>Spring Boot 2.x</td><td>完整功能</td><td>Spring Boot 2.x 完整版本</td></tr></tbody></table><h4 id="_6-2-包结构" tabindex="-1">6.2 包结构 <a class="header-anchor" href="#_6-2-包结构" aria-label="Permalink to &quot;6.2 包结构&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>org.liuxp.minioplus.common.config</span></span></code></pre></div><p><strong>主要功能</strong>:</p><ul><li>自动配置类</li><li>Bean 注册</li><li>配置属性绑定</li><li>条件装配</li></ul><h2 id="包命名规范" tabindex="-1">包命名规范 <a class="header-anchor" href="#包命名规范" aria-label="Permalink to &quot;包命名规范&quot;">​</a></h2><h3 id="基础包结构" tabindex="-1">基础包结构 <a class="header-anchor" href="#基础包结构" aria-label="Permalink to &quot;基础包结构&quot;">​</a></h3><p>所有模块都遵循统一的包命名规范：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>org.liuxp.minioplus.{module}</span></span></code></pre></div><p>其中 <code>{module}</code> 为具体的模块名称。</p><h3 id="详细包说明" tabindex="-1">详细包说明 <a class="header-anchor" href="#详细包说明" aria-label="Permalink to &quot;详细包说明&quot;">​</a></h3><table tabindex="0"><thead><tr><th>包名</th><th>用途</th><th>示例</th></tr></thead><tbody><tr><td><code>*.common</code></td><td>通用组件</td><td>工具类、常量、基础类</td></tr><tr><td><code>*.config</code></td><td>配置相关</td><td>配置类、属性类</td></tr><tr><td><code>*.enums</code></td><td>枚举定义</td><td>业务枚举、状态枚举</td></tr><tr><td><code>*.exception</code></td><td>异常定义</td><td>自定义异常类</td></tr><tr><td><code>*.model</code></td><td>数据模型</td><td>DTO、VO、Entity</td></tr><tr><td><code>*.api</code></td><td>接口定义</td><td>Service 接口</td></tr><tr><td><code>*.service</code></td><td>服务实现</td><td>业务逻辑实现</td></tr><tr><td><code>*.repository</code></td><td>数据访问</td><td>DAO、Repository</td></tr><tr><td><code>*.engine</code></td><td>引擎实现</td><td>核心算法、处理引擎</td></tr><tr><td><code>*.controller</code></td><td>控制器</td><td>Web 控制器</td></tr><tr><td><code>*.dto</code></td><td>数据传输</td><td>请求响应对象</td></tr><tr><td><code>*.context</code></td><td>上下文</td><td>上下文管理器</td></tr><tr><td><code>*.def</code></td><td>定义抽象</td><td>接口定义、抽象类</td></tr><tr><td><code>*.official</code></td><td>官方实现</td><td>官方 SDK 适配</td></tr></tbody></table><h2 id="模块依赖关系" tabindex="-1">模块依赖关系 <a class="header-anchor" href="#模块依赖关系" aria-label="Permalink to &quot;模块依赖关系&quot;">​</a></h2><h3 id="依赖层次图" tabindex="-1">依赖层次图 <a class="header-anchor" href="#依赖层次图" aria-label="Permalink to &quot;依赖层次图&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>┌───────────────────────────────────────────┐</span></span>
<span class="line"><span>│           Spring Boot Starters            │</span></span>
<span class="line"><span>│  ┌─────────────────────────────────────┐  │</span></span>
<span class="line"><span>│  │        minio-plus-extension         │  │</span></span>
<span class="line"><span>│  └─────────────────────────────────────┘  │</span></span>
<span class="line"><span>└───────────────────────────────────────────┘</span></span>
<span class="line"><span>                    │</span></span>
<span class="line"><span>                    ▼</span></span>
<span class="line"><span>┌───────────────────────────────────────────┐</span></span>
<span class="line"><span>│            minio-plus-core                │</span></span>
<span class="line"><span>└───────────────────────────────────────────┘</span></span>
<span class="line"><span>                    │</span></span>
<span class="line"><span>                    ▼</span></span>
<span class="line"><span>┌───────────────────────────────────────────┐</span></span>
<span class="line"><span>│  ┌─────────────────┐ ┌──────────────────┐ │</span></span>
<span class="line"><span>│  │ minio-plus-api  │ │ s3-api-definition│ │</span></span>
<span class="line"><span>│  └─────────────────┘ └──────────────────┘ │</span></span>
<span class="line"><span>└───────────────────────────────────────────┘</span></span>
<span class="line"><span>                    │</span></span>
<span class="line"><span>                    ▼</span></span>
<span class="line"><span>┌───────────────────────────────────────────┐</span></span>
<span class="line"><span>│           minio-plus-common               │</span></span>
<span class="line"><span>└───────────────────────────────────────────┘</span></span></code></pre></div><h3 id="依赖规则" tabindex="-1">依赖规则 <a class="header-anchor" href="#依赖规则" aria-label="Permalink to &quot;依赖规则&quot;">​</a></h3><ol><li><strong>向上依赖</strong>: 低层模块可以被高层模块依赖</li><li><strong>禁止循环依赖</strong>: 任何模块之间不允许出现循环依赖</li><li><strong>最小依赖原则</strong>: 每个模块只依赖必要的模块</li><li><strong>接口隔离</strong>: 通过接口定义模块间的交互</li></ol><h3 id="具体依赖关系" tabindex="-1">具体依赖关系 <a class="header-anchor" href="#具体依赖关系" aria-label="Permalink to &quot;具体依赖关系&quot;">​</a></h3><table tabindex="0"><thead><tr><th>模块</th><th>直接依赖</th><th>说明</th></tr></thead><tbody><tr><td><code>minio-plus-common</code></td><td>无</td><td>基础模块，不依赖其他业务模块</td></tr><tr><td><code>minio-plus-api</code></td><td><code>minio-plus-common</code></td><td>依赖公共组件</td></tr><tr><td><code>s3-api-definition</code></td><td><code>minio-plus-common</code></td><td>S3 接口定义</td></tr><tr><td><code>s3-api-minio</code></td><td><code>s3-api-definition</code></td><td>S3 具体实现</td></tr><tr><td><code>minio-plus-core</code></td><td><code>minio-plus-common</code><br><code>minio-plus-api</code><br><code>s3-api-definition</code></td><td>核心实现模块</td></tr><tr><td><code>minio-plus-extension</code></td><td><code>minio-plus-core</code></td><td>扩展功能模块</td></tr><tr><td><code>*-springboot-starter</code></td><td>根据功能范围依赖相应模块</td><td>Spring Boot 集成</td></tr></tbody></table><h2 id="代码组织原则" tabindex="-1">代码组织原则 <a class="header-anchor" href="#代码组织原则" aria-label="Permalink to &quot;代码组织原则&quot;">​</a></h2><h3 id="_1-单一职责原则" tabindex="-1">1. 单一职责原则 <a class="header-anchor" href="#_1-单一职责原则" aria-label="Permalink to &quot;1. 单一职责原则&quot;">​</a></h3><p>每个模块都有明确的职责边界：</p><ul><li><strong>common</strong>: 通用基础组件</li><li><strong>api</strong>: 接口定义</li><li><strong>core</strong>: 核心业务实现</li><li><strong>extension</strong>: 扩展功能</li><li><strong>s3-api</strong>: S3 协议适配</li><li><strong>starter</strong>: Spring Boot 集成</li></ul><h3 id="_2-开闭原则" tabindex="-1">2. 开闭原则 <a class="header-anchor" href="#_2-开闭原则" aria-label="Permalink to &quot;2. 开闭原则&quot;">​</a></h3><ul><li>通过接口定义实现扩展性</li><li>核心功能稳定，扩展功能可插拔</li><li>支持自定义实现替换默认实现</li></ul><h3 id="_3-依赖倒置原则" tabindex="-1">3. 依赖倒置原则 <a class="header-anchor" href="#_3-依赖倒置原则" aria-label="Permalink to &quot;3. 依赖倒置原则&quot;">​</a></h3><ul><li>高层模块不依赖低层模块的具体实现</li><li>通过抽象接口定义依赖关系</li><li>支持依赖注入和控制反转</li></ul><h3 id="_4-接口隔离原则" tabindex="-1">4. 接口隔离原则 <a class="header-anchor" href="#_4-接口隔离原则" aria-label="Permalink to &quot;4. 接口隔离原则&quot;">​</a></h3><ul><li>接口定义精简，职责单一</li><li>避免胖接口，按功能拆分接口</li><li>客户端只依赖需要的接口</li></ul><h2 id="扩展指南" tabindex="-1">扩展指南 <a class="header-anchor" href="#扩展指南" aria-label="Permalink to &quot;扩展指南&quot;">​</a></h2><h3 id="添加新功能模块" tabindex="-1">添加新功能模块 <a class="header-anchor" href="#添加新功能模块" aria-label="Permalink to &quot;添加新功能模块&quot;">​</a></h3><ol><li><p><strong>创建新模块</strong></p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;minio-plus-new-feature&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>定义包结构</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>org.liuxp.minioplus.newfeature</span></span>
<span class="line"><span>├── config/</span></span>
<span class="line"><span>├── service/</span></span>
<span class="line"><span>└── model/</span></span></code></pre></div></li><li><p><strong>添加依赖关系</strong></p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;me.liuxp&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;minio-plus-core&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li></ol><h3 id="自定义-s3-实现" tabindex="-1">自定义 S3 实现 <a class="header-anchor" href="#自定义-s3-实现" aria-label="Permalink to &quot;自定义 S3 实现&quot;">​</a></h3><ol><li><p><strong>实现 S3 接口</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CustomS3Service</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> S3Service</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 自定义实现</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>创建适配模块</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>s3-api-custom/</span></span>
<span class="line"><span>└── org.liuxp.minioplus.s3.custom/</span></span></code></pre></div></li><li><p><strong>注册实现</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CustomS3Configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> S3Service </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">customS3Service</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CustomS3Service</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><h3 id="spring-boot-starter-扩展" tabindex="-1">Spring Boot Starter 扩展 <a class="header-anchor" href="#spring-boot-starter-扩展" aria-label="Permalink to &quot;Spring Boot Starter 扩展&quot;">​</a></h3><ol><li><p><strong>创建自动配置类</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">EnableConfigurationProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CustomProperties.class)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CustomAutoConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 自动配置逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>添加配置文件</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>META-INF/spring.factories</span></span>
<span class="line"><span>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</span></span></code></pre></div></li></ol><h2 id="常见问题" tabindex="-1">常见问题 <a class="header-anchor" href="#常见问题" aria-label="Permalink to &quot;常见问题&quot;">​</a></h2><h3 id="q-如何选择合适的-starter" tabindex="-1">Q: 如何选择合适的 Starter？ <a class="header-anchor" href="#q-如何选择合适的-starter" aria-label="Permalink to &quot;Q: 如何选择合适的 Starter？&quot;">​</a></h3><p><strong>A</strong>: 根据项目需求选择：</p><ul><li>只需要核心存储功能：选择 <code>core-springboot-starter</code></li><li>需要完整功能：选择 <code>all-springboot-starter</code></li><li>Spring Boot 2.x 项目：选择对应的 <code>springboot2-starter</code></li></ul><h3 id="q-如何自定义存储实现" tabindex="-1">Q: 如何自定义存储实现？ <a class="header-anchor" href="#q-如何自定义存储实现" aria-label="Permalink to &quot;Q: 如何自定义存储实现？&quot;">​</a></h3><p><strong>A</strong>: 参考 <em>自定义 S3 实现</em> 章节</p><h3 id="q-模块间如何通信" tabindex="-1">Q: 模块间如何通信？ <a class="header-anchor" href="#q-模块间如何通信" aria-label="Permalink to &quot;Q: 模块间如何通信？&quot;">​</a></h3><p><strong>A</strong>:</p><ul><li>通过接口定义交互规范</li><li>使用依赖注入管理对象</li><li>避免直接依赖具体实现类</li></ul><hr><blockquote><p>💡 <strong>开发提示</strong>：</p><ul><li>新增功能时优先考虑在 <code>extension</code> 模块中实现</li><li>修改核心功能时要考虑向后兼容性</li><li>添加新依赖时要评估对项目整体的影响</li><li>定期重构代码，保持架构清晰</li></ul></blockquote>`,100)]))}const u=a(e,[["render",l]]);export{g as __pageData,u as default};
