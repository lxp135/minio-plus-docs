import{_ as e,c as a,o as i,aS as l}from"./chunks/framework.C0qmDEpW.js";const m=JSON.parse('{"title":"Changelog","description":"","frontmatter":{},"headers":[],"relativePath":"en/guide/released.md","filePath":"en/guide/released.md"}'),t={name:"en/guide/released.md"},o=l('<h1 id="changelog" tabindex="-1">Changelog <a class="header-anchor" href="#changelog" aria-label="Permalink to &quot;Changelog&quot;">​</a></h1><h2 id="v0-1-3-2024-07-15" tabindex="-1">v0.1.3 (2024-07-15) <a class="header-anchor" href="#v0-1-3-2024-07-15" aria-label="Permalink to &quot;v0.1.3 (2024-07-15)&quot;">​</a></h2><h3 id="bugfix" tabindex="-1">Bugfix <a class="header-anchor" href="#bugfix" aria-label="Permalink to &quot;Bugfix&quot;">​</a></h3><ul><li>Fixed the problem of the frontend calculating MD5 values when uploading large files on the upload.html test page.</li><li>When the backend calls the StorageService.createFile method, the same user can upload the same file and generate different fileKeys.</li></ul><h3 id="feature" tabindex="-1">Feature <a class="header-anchor" href="#feature" aria-label="Permalink to &quot;Feature&quot;">​</a></h3><ul><li>The StorageService class adds the createBigFile interface for large file uploads.</li></ul><h2 id="v0-1-2-2024-06-18" tabindex="-1">v0.1.2 (2024-06-18) <a class="header-anchor" href="#v0-1-2-2024-06-18" aria-label="Permalink to &quot;v0.1.2 (2024-06-18)&quot;">​</a></h2><h3 id="bugfix-1" tabindex="-1">Bugfix <a class="header-anchor" href="#bugfix-1" aria-label="Permalink to &quot;Bugfix&quot;">​</a></h3><p>无</p><h3 id="feature-1" tabindex="-1">Feature <a class="header-anchor" href="#feature-1" aria-label="Permalink to &quot;Feature&quot;">​</a></h3><ul><li>Add the release module <code>minio-plus-core-spring-boot-starter</code>, which only releases the Service layer interface without releasing the Controller.</li><li>Add demonstration module <code>minio-plus-application-schedule</code>, this module uses <code>minio-plus-core-spring-boot-starter</code> to implement a regular file cleanup strategy.</li><li>Deleted the original image upload logic, used a lazy loading strategy, and generated a preview image for the first time.</li></ul><h2 id="v0-1-1-2024-06-12" tabindex="-1">v0.1.1 (2024-06-12) <a class="header-anchor" href="#v0-1-1-2024-06-12" aria-label="Permalink to &quot;v0.1.1 (2024-06-12)&quot;">​</a></h2><h3 id="bugfix-2" tabindex="-1">Bugfix <a class="header-anchor" href="#bugfix-2" aria-label="Permalink to &quot;Bugfix&quot;">​</a></h3><ul><li>Upgrade <code>mybatisplus</code> 3.5.3.1 -&gt; 3.5.7</li><li>Upgrade <code>lombok</code> 1.18.24 -&gt; 1.18.32</li><li>Upgrade <code>thumbnailator</code> 0.4.8 -&gt; 0.4.20</li><li>Upgrade <code>hutool</code> 5.8.15 -&gt; 5.8.28</li><li>Deleted unused dependencies <code>spring-cloud-dependencies</code> and <code>spring-cloud-alibaba-dependencies</code></li></ul><h3 id="feature-2" tabindex="-1">Feature <a class="header-anchor" href="#feature-2" aria-label="Permalink to &quot;Feature&quot;">​</a></h3><ul><li>minio-plus-extension introduces UserHolder to store login user IDs, and the demonstration project adds an interceptor to implement login user logic.</li><li>Adjusted the release logic, configured to ignore publishing <code>minio-plus-application</code> and <code>minio-plus-application-mysql</code>.</li></ul><h2 id="v0-1-0-2024-06-11" tabindex="-1">v0.1.0 (2024-06-11) <a class="header-anchor" href="#v0-1-0-2024-06-11" aria-label="Permalink to &quot;v0.1.0 (2024-06-11)&quot;">​</a></h2><p>The first preview version released, this version implements basic upload, preview, and download functionalities.</p><h3 id="bugfix-3" tabindex="-1">Bugfix <a class="header-anchor" href="#bugfix-3" aria-label="Permalink to &quot;Bugfix&quot;">​</a></h3><p>无</p><h3 id="feature-3" tabindex="-1">Feature <a class="header-anchor" href="#feature-3" aria-label="Permalink to &quot;Feature&quot;">​</a></h3><ul><li>Implemented upload logic, including instant uploads, chunked uploads, and resumable uploads.</li><li>Implemented download logic, including image previews and file downloads.</li><li>Implemented thumbnail logic, automatically generating thumbnails when uploading images.</li><li>Implemented bucket strategy, automatically creating buckets based on file type.</li><li>Provided file metadata implementation based on MySQL.</li></ul>',22),r=[o];function d(n,u,s,c,h,g){return i(),a("div",null,r)}const f=e(t,[["render",d]]);export{m as __pageData,f as default};
